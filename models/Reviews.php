<?php

namespace app\models;

use app\components\ReCaptcha;
use app\components\SmtpEmail;
use app\helpers\Normalize;
use app\helpers\Statuses;
use Yii;
use yii\db\ActiveRecord;
use yii\helpers\Url;

/**
 * This is the model class for table "{{%orders}}".
 *
 * @property integer $id
 * @property integer $manager_id
 * @property integer $aqua_type
 * @property string $img_name
 * @property string $img_content
 * @property string $name
 * @property string $email
 * @property string $phone
 * @property integer $view_type
 * @property integer $service_type
 * @property string $comment
 * @property integer $created
 * @property integer $modified
 * @property integer $status
 * @property integer $send_mail
 */
class Reviews extends ActiveRecord
{
    const DEFAULT_FISH = '/img/default-fish.png';
    
    const SCENARIO_SITE = 'site';
    
    public $captcha;

    public static function tableName()
    {
        return '{{%reviews}}';
    }

    public function getManager() {
        return $this->hasOne(Users::className(), ['id' => 'manager_id']);
    }

    public function rules()
    {
        return [
            [['name', 'comment', 'created'], 'required'],

            ['email', 'email'],

            [['manager_id', 'created', 'modified', 'status', 'ordering'], 'integer'],
            [['manager_id', 'created', 'modified', 'status', 'ordering'], 'default', 'value' => 0],

            ['send_mail', 'boolean'],

            [['img_name', 'img_content'], 'string', 'max' => 50],
            [['name', 'email'], 'string', 'max' => 100],
            [['comment'], 'string', 'min' => 10, 'max' => 1000],

            ['captcha', 'required', 'message' => 'Необходимо отметить поле "Я не робот"', 'on' => self::SCENARIO_SITE],
            ['captcha', 'checkCaptcha', 'on' => self::SCENARIO_SITE]
        ];
    }
    
    public function checkCaptcha($attribute, $params) {
        $re_captcha = new ReCaptcha($this->{$attribute});
        if (!$re_captcha->validate()) {
            $this->addError($attribute, 'Некорректное значение reCaptcha');
        }
    }

    public function beforeValidate()
    {
        if ($this->isNewRecord) {
            $this->created = time();

            $smtp = new SmtpEmail();
            $smtp->sendEmailByType(SmtpEmail::TYPE_REVIEW_NEW, $this->email, $this->name, [
                'message' => nl2br($this->comment)
            ]);

        } else {
            $this->modified = time();

            $self = self::findOne($this->id);
            if (!$self->send_mail && $this->send_mail) {
                if (empty($this->email)) {
                    $this->addError('email', 'Чтобы отправить уведомление необходимо ввести Email');
                } elseif ($this->status == Statuses::STATUS_ACTIVE) {
                    // ok
                } else {
                    $this->addError('status', 'Чтобы отправить уведомление автору необходимо опубликовать отзыв');
                }
            }
        }

        if (Users::isManager()) {
            $this->manager_id = Yii::$app->user->id;
        }
        
        if ($this->scenario == self::SCENARIO_SITE) {
            $this->captcha = Yii::$app->request->post(ReCaptcha::FIELD_NAME);
        }

        return parent::beforeValidate();
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub

        if ($this->status == Statuses::STATUS_ACTIVE && $this->send_mail) {
            $smtp = new SmtpEmail();
            $smtp->sendEmailByType(SmtpEmail::TYPE_REVIEW_PUBLISHED, $this->email, $this->name, [
                '{reviews-url}' => Url::to([Normalize::fixAlias(Pages::REVIEWS_ID)], true)
            ]);
        }
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'manager_id' => 'Менеджер',
            'img_name' => 'Фото',
            'img_content' => 'Фото для отзыва',
            'name' => 'Имя',
            'email' => 'Email',
            'comment' => 'Отзыв',
            'created' => 'Создан',
            'modified' => 'Изменен',
            'status' => 'Статус',
            'ordering' => 'Порядок',
        ];
    }

    public static function find()
    {
        return new ReviewsQuery(get_called_class());
    }
}
